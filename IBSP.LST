C51 COMPILER V9.00   IBSP                                                                  03/18/2016 16:14:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE IBSP
OBJECT MODULE PLACED IN IBSP.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE IBSP.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2           *           Copyright 2007-2009 Availink, Inc.
   3           *
   4           *  This software contains Availink proprietary information and
   5           *  its use and disclosure are restricted solely to the terms in
   6           *  the corresponding written license agreement. It shall not be 
   7           *  disclosed to anyone other than valid licensees without
   8           *  written permission of Availink, Inc.
   9           *
  10           */
  11          
  12          
  13          
  14          #include "IBSP.h"
  15          #include "c8051f120.h"
  16          #include "MyVariable.h"
  17          #include <math.h>
  18          
  19          
  20          
  21          A2108_ErrorCode A2108_IBSP_InitSemaphore( AVL_psemaphore pSemaphore )
  22          {
  23   1              pSemaphore = pSemaphore;
  24   1              return(A2108_EC_OK);
  25   1      }
  26          
  27          A2108_ErrorCode A2108_IBSP_WaitSemaphore( AVL_psemaphore pSemaphore )
  28          {
  29   1              pSemaphore = pSemaphore;
  30   1              return(A2108_EC_OK);
  31   1      }
  32          
  33          A2108_ErrorCode A2108_IBSP_ReleaseSemaphore( AVL_psemaphore pSemaphore )
  34          {
  35   1              pSemaphore = pSemaphore;
  36   1              return(A2108_EC_OK);
  37   1      }  
  38          
  39          
  40          
  41          void A2108_IBSP_Delay( AVL_uint32 uiMS )
  42          {       // uiMS/=10;
  43   1               while(--uiMS){;}               
  44   1      }
  45           
  46                  void A2108_IBSP_Delay_ms( AVL_uint32 uiMS )
  47          {        uiMS *= 420;
  48   1               while(--uiMS){;}               
  49   1      }
  50             
  51          A2108_ErrorCode A2108_IBSP_I2CRead( AVL_uint16 uiSlaveAddr,  AVL_puchar pucBuff, AVL_uint16 uiSize )
  52          {   int i;
  53   1          AVL_uchar ack;
  54   1      
  55   1          uiSlaveAddr<<=1;
C51 COMPILER V9.00   IBSP                                                                  03/18/2016 16:14:09 PAGE 2   

  56   1              uiSlaveAddr+=1; 
  57   1      
  58   1              SFRPAGE = 0x0F;    //120修改
  59   1              Start_I2C();
  60   1          ack=SendByteAck(uiSlaveAddr); //不能循环执行，发送地址并响应 
  61   1              
  62   1              A2108_IBSP_Delay(10);  //+++++++++++++bj
  63   1              SCLK_0 ;
  64   1              A2108_IBSP_Delay(2);
  65   1              SDATA_1;
  66   1              A2108_IBSP_Delay(2); //+++++++++++++++++++++==bj
  67   1                      
  68   1              for(i=0;i<uiSize-1;i++)
  69   1              {
  70   2              pucBuff[i]=RcvByte();   //接收的字节放入数组 ，并响应
  71   2      
  72   2              SDATA_0;
  73   2              A2108_IBSP_Delay(2);
  74   2              SCLK_1;
  75   2              A2108_IBSP_Delay(2);
  76   2              SCLK_0;
  77   2              A2108_IBSP_Delay(2);      //+++++++++++++=bj
  78   2              SDATA_1;
  79   2              A2108_IBSP_Delay(2);
  80   2      
  81   2      //      Ack_I2c(0);                      //-----------bj
  82   2              
  83   2              A2108_IBSP_Delay(10);
  84   2      
  85   2              }
  86   1              pucBuff[i]=RcvByte();    //接收最后一个字节不响应
  87   1      //      Ack_I2c(1);                       //--------------bj
  88   1               A2108_IBSP_Delay(5);
  89   1              Stop_I2c();      
  90   1       
  91   1              return(ack);
  92   1      }
  93          
  94          
  95          A2108_ErrorCode A2108_IBSP_I2CWrite(  AVL_uint16 uiSlaveAddr,  AVL_puchar pucBuff ,  AVL_uint16  uiSize )
  96          {       AVL_uchar i,ack;     
  97   1          
  98   1                
  99   1              uiSlaveAddr<<=1;
 100   1      
 101   1      //      da=DeChunk32(pucBuff);
 102   1          SFRPAGE = 0x0F;       //120修改
 103   1              Start_I2C();                    
 104   1                                                                                                                                                         
 105   1              ack=SendByteAck(uiSlaveAddr);              //同一个字节连续发时序没有问题       
 106   1               if(ack!=0) return(A2108_EC_I2CFail);  
 107   1               for(i=0;i<uiSize;i++)                                                                                    
 108   1               {
 109   2               ack|=SendByteAck(pucBuff[i]);
 110   2               if(ack!=0) return(A2108_EC_I2CFail); 
 111   2           }      
 112   1              
 113   1              Stop_I2c();     
 114   1                      
 115   1              return(A2108_EC_OK);
 116   1        }
 117          
C51 COMPILER V9.00   IBSP                                                                  03/18/2016 16:14:09 PAGE 3   

 118          
 119          
 120                  static void Start_I2C(void)              //打开I2C                  
 121          {       //SCLK_0 ;
 122   1              //A2108_IBSP_Delay(30);         //---------bj  20                                                                                                                   
 123   1              SDATA_1 ;
 124   1              A2108_IBSP_Delay(3);    // 10      
 125   1              SCLK_1 ;
 126   1              A2108_IBSP_Delay(2);
 127   1              SDATA_0;
 128   1          A2108_IBSP_Delay(3);
 129   1              SCLK_0 ;
 130   1              A2108_IBSP_Delay(2);
 131   1      }
 132          static void Stop_I2c(void)                       //关闭I2C                  
 133          {   
 134   1         // SCLK_0 ;     
 135   1              //A2108_IBSP_Delay(20);  //---------北京20
 136   1              SDATA_0;
 137   1              A2108_IBSP_Delay(2); // 10       
 138   1              SCLK_1 ;
 139   1              A2108_IBSP_Delay(2);
 140   1              SDATA_1 ;
 141   1              A2108_IBSP_Delay(3);
 142   1      //      SCLK_0 ;
 143   1       //     A2108_IBSP_Delay(30);              //--------北京20
 144   1      }
 145          
 146          
 147          static AVL_uchar SendByteAck(unsigned char c)    //发送一个字节的比特并响应                 
 148          {
 149   1              char BitCnt;
 150   1          AVL_uchar a;
 151   1              for(BitCnt = 0;BitCnt<8;BitCnt++)
 152   1              {        
 153   2                 // SCLK_0 ;
 154   2                      //A2108_IBSP_Delay(30);
 155   2              if((c<<BitCnt)&0x80)
 156   2                      SDATA_1 ;
 157   2                      else 
 158   2                              SDATA_0;
 159   2              A2108_IBSP_Delay(2);
 160   2              SCLK_1 ;
 161   2              A2108_IBSP_Delay(5);
 162   2                      SCLK_0 ;        //++++++++++++++=bj
 163   2                      A2108_IBSP_Delay(3);    //+++++++++++++===bj
 164   2              }
 165   1      
 166   1      //      SCLK_0 ;                           //此后应答
 167   1      //      A2108_IBSP_Delay(20);  
 168   1              a=AckCheck();              //应答检测
 169   1              SCLK_0 ;                           
 170   1              A2108_IBSP_Delay(4);
 171   1          return(a);
 172   1      }
 173          
 174          
 175          
 176          
 177          
 178          static AVL_uchar RcvByte(void)
 179          {
C51 COMPILER V9.00   IBSP                                                                  03/18/2016 16:14:09 PAGE 4   

 180   1        AVL_uchar retc;
 181   1        char BitCnt;
 182   1        
 183   1        retc=0; 
 184   1        //SDATA_1;             //---------bj/*置数据线为输入方式*/
 185   1        for(BitCnt=0;BitCnt<8;BitCnt++)
 186   1            {
 187   2             // A2108_IBSP_Delay(20);           
 188   2              //SCLK_0;      //-------bj /*置时钟线为低，准备接收数据位*/
 189   2              //A2108_IBSP_Delay(50);    //-------bj
 190   2              SCLK_1;       /*置时钟线为高使数据线上数据有效*/
 191   2              A2108_IBSP_Delay(2); 
 192   2              retc=retc<<1;
 193   2              if(SSDA_IN)  retc|= 0x01; /*读数据位,接收的数据位放入retc中 */
 194   2                      else         retc&= 0xFE; 
 195   2              A2108_IBSP_Delay(3) ;      
 196   2                      SCLK_0;      //++++++++++++bj /*置时钟线为低，准备接收数据位*/
 197   2              A2108_IBSP_Delay(5);            
 198   2                        }     
 199   1                        
 200   1                  return(retc);       
 201   1        }
 202          
 203          
 204                  static  AVL_uchar AckCheck(void)   //ACK应答   
 205          {
 206   1              AVL_uchar a=1;
 207   1              int count=0;
 208   1              SDATA_1;          //+++++++++++++++++++++bj   8位发送完后释放数据线，准备接收应答位
 209   1              A2108_IBSP_Delay(2);
 210   1              //SCLK_0 ;                         //此后应答
 211   1              //A2108_IBSP_Delay(50); //-------bj
 212   1              SCLK_1;
 213   1              A2108_IBSP_Delay(3);
 214   1              a = SSDA_IN;
 215   1      
 216   1              while(a!=0&&count<10)    // +++++++++++++++++bj+++28
 217   1                   {
 218   2                       a = SSDA_IN;
 219   2                       count++;
 220   2                       A2108_IBSP_Delay(2);
 221   2                       }
 222   1              A2108_IBSP_Delay(2);
 223   1              //SCLK_0 ;        //-----------bj
 224   1              return(a);
 225   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1164    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     44    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
