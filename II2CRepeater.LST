C51 COMPILER V9.00   II2CREPEATER                                                          03/18/2016 16:14:09 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE II2CREPEATER
OBJECT MODULE PLACED IN II2CRepeater.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE II2CRepeater.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2           *           Copyright 2007-2009 Availink, Inc.
   3           *
   4           *  This software contains Availink proprietary information and
   5           *  its use and disclosure are restricted solely to the terms in
   6           *  the corresponding written license agreement. It shall not be 
   7           *  disclosed to anyone other than valid licensees without
   8           *  written permission of Availink, Inc.
   9           *
  10           */
  11          
  12          
  13          //$Revision: 581 $ 
  14          //$Date: 2008-10-23 13:31:49 -0400 (Thu, 23 Oct 2008) $
  15          // 
  16          #include "II2CRepeater.h"
  17          #include "IBSP.h"
  18          #include "II2C.h"
  19          
  20          A2108_ErrorCode A2108_II2CRepeater_SendOP(AVL_puchar pBuff, AVL_uchar ucSize, struct A2108_Chip * pAVLChip
             - )
  21          {
  22   1              A2108_ErrorCode r;
  23   1              const AVL_uint16 uiTimeDelay = 10;
  24   1              const AVL_uint16 uiMaxRetries = 20;
  25   1              AVL_uint32 i;
  26   1      
  27   1              r = A2108_IBSP_WaitSemaphore(&(pAVLChip->m_semI2CRepeater));
  28   1      
  29   1              i = 0;
  30   1              while (A2108_EC_OK != A2108_II2CRepeater_GetOPStatus(pAVLChip))  //»Áπ˚“‘«∞√¸¡Ó√ª”–÷¥––ÕÍ±œ‘Úµ»¥˝
  31   1              {
  32   2                      if (uiMaxRetries < i++)
  33   2                      {
  34   3                              r |= A2108_EC_Running;  //µ»¥˝ ±º‰µΩ£¨µ´ «ªπ“‘«∞√¸¡Óªπ√ª”–ÕÍ±œ£¨◊¥Ã¨rŒ™running
  35   3                              break;             
  36   3                      }
  37   2                      A2108_IBSP_Delay(uiTimeDelay);
  38   2              }
  39   1      
  40   1              if ( A2108_EC_OK == r )  //÷Æ«∞µƒ√¸¡Ó÷¥––ÕÍ±œ£¨‘Ú÷¥––∏√√¸¡Ó
  41   1              {
  42   2                      r = A2108_II2C_Write((AVL_uint16)(pAVLChip->m_SlaveAddr), pBuff, ucSize);  //÷Æ«∞µƒ√¸¡Ó“—æ≠÷¥––ÕÍ±œµƒª∞£
             -¨‘Ú÷¥––∏√√¸¡Ó
  43   2              }
  44   1              r |= A2108_IBSP_ReleaseSemaphore(&(pAVLChip->m_semI2CRepeater));
  45   1              return(r);
  46   1      }
  47          
  48          
  49           /*      
  50          Initialize the I2C repeater. 
  51          Parameters: 
  52          I2CBusClock_kHz  The clock speed of the I2C bus between the tuner and the AVL2108 chip.   
  53          pAVLChip  A pointer that points to an A2108_Chip object which is used to tell the function which AVL2108 c
C51 COMPILER V9.00   II2CREPEATER                                                          03/18/2016 16:14:09 PAGE 2   

             -hip it is working on.  
  54           I2C Repeater≥ı ºªØ I2CbusClock « tuner∫Õ2108÷Æº‰µƒ ±÷”ÀŸ∂»
  55           */
  56          A2108_ErrorCode A2108_II2CRepeater_Initialize( AVL_uint16 I2CBusClock_kHz, struct A2108_Chip * pAVLChip )
  57          {
  58   1              AVL_uchar pBuff[5];
  59   1              A2108_ErrorCode r;
  60   1              r = A2108_II2C_Write16((AVL_uint16)(pAVLChip->m_SlaveAddr), rc_i2cm_speed_kHz_addr, I2CBusClock_kHz);
  61   1              ChunkAddr(i2cm_cmd_addr+I2CM_CMD_LENGTH-2, pBuff);
  62   1              pBuff[3] = 0x01;
  63   1              pBuff[4] = OP_I2CM_INIT; //≥ı ºªØ√¸¡Ó∑÷≈‰µΩ ˝◊È÷–
  64   1              r |= A2108_II2CRepeater_SendOP(pBuff, 5, pAVLChip);
  65   1              return r;
  66   1      }
  67          
  68          
  69            /* Check if the last I2C repeater operation is finished. 
  70             ºÏ≤È◊Ó∫Û“ª∏ˆrepeater≤Ÿ◊˜ «∑ÒÕÍ≥… */
  71          A2108_ErrorCode A2108_II2CRepeater_GetOPStatus( const struct A2108_Chip * pAVLChip )
  72          {
  73   1              A2108_ErrorCode r;
  74   1              AVL_uchar pBuff[2];
  75   1              r = A2108_II2C_Read((AVL_uint16)(pAVLChip->m_SlaveAddr), i2cm_cmd_addr+I2CM_CMD_LENGTH-2, pBuff, 2);
  76   1              if ( A2108_EC_OK == r )
  77   1              {
  78   2                      if ( pBuff[1] != 0 )
  79   2                      {
  80   3                              r = A2108_EC_Running;
  81   3                      }
  82   2              }
  83   1              return(r);
  84   1      }
  85          
  86          /*Reads data back from the tuner via the I2C repeater.  This function is used to read data from a tuner  
  87          which does not require a repeated start condition during its read cycle.  
  88          Parameters: 
  89          ucSlaveAddr  The slave address of the tuner device. Please note AVL2108 only support 7 bits slave address.
             -   
  90          ucBuff  The buffer which carry back the read data.   
  91          uiSize  How many bytes the caller want to read back.   
  92          pAVLChip  A pointer that points to an A2108_Chip object which is used to tell the function which AVL2108 c
             -hip it is working on.  
  93          Remarks: 
  94          This function will trigger a I2C read operation. The read position (or device internal address) could be
  95           determined by calling A2108_II2CRepeater_SendData.   */
  96          A2108_ErrorCode A2108_II2CRepeater_ReadData( AVL_uchar ucSlaveAddr, AVL_puchar pucBuff, AVL_uint16 uiSize,
             - struct A2108_Chip * pAVLChip )
  97          {
  98   1              A2108_ErrorCode r;
  99   1              AVL_uchar pBuff[I2CM_RSP_LENGTH];
 100   1              AVL_uint16 uiTimeOut;
 101   1              const AVL_uint16 uiTimeOutTh = 10;
 102   1              const AVL_uint32 uiTimeDelay = 100;  //100 ms 
 103   1      
 104   1              if ( uiSize > I2CM_RSP_LENGTH )
 105   1              {
 106   2                      return(A2108_EC_GeneralFail);
 107   2              }
 108   1              r = A2108_IBSP_WaitSemaphore(&(pAVLChip->m_semI2CRepeater_r));
 109   1      
 110   1              ChunkAddr(i2cm_cmd_addr+I2CM_CMD_LENGTH-4, pBuff);       //     ¥”µÿ÷∑
 111   1              pBuff[3] = 0x0;
C51 COMPILER V9.00   II2CREPEATER                                                          03/18/2016 16:14:09 PAGE 3   

 112   1              pBuff[4] = (AVL_uchar)uiSize;
 113   1              pBuff[5] = ucSlaveAddr;
 114   1              pBuff[6] = OP_I2CM_READ;
 115   1              r |= A2108_II2CRepeater_SendOP(pBuff, 7, pAVLChip);
 116   1              if ( A2108_EC_OK == r )
 117   1              {
 118   2                      uiTimeOut = 0;
 119   2                      while ( A2108_EC_OK != A2108_II2CRepeater_GetOPStatus(pAVLChip) )  //∑¢≥ˆµƒ√¸¡Ó√ª”–÷¥––ÕÍ±œµƒª∞£¨ºÃ–¯÷¥–
             -–
 120   2                      {
 121   3                              if((++uiTimeOut) >= uiTimeOutTh) //»Áπ˚ ±º‰µΩªπ√ª”–÷¥––ÕÍ±œ£¨‘Ú ß∞‹
 122   3                              {
 123   4                                      r |= A2108_EC_TimeOut;
 124   4                                      r |= A2108_IBSP_ReleaseSemaphore(&(pAVLChip->m_semI2CRepeater_r));
 125   4                                      return(r);
 126   4                              }
 127   3                              A2108_IBSP_Delay_ms(uiTimeDelay);
 128   3                      }
 129   2                      r |= (A2108_II2C_Read((AVL_uint16)(pAVLChip->m_SlaveAddr), i2cm_rsp_addr, pucBuff, uiSize));
 130   2              }
 131   1              r |= A2108_IBSP_ReleaseSemaphore(&(pAVLChip->m_semI2CRepeater_r));
 132   1              return(r);
 133   1      }
 134          
 135          
 136          /* Write data to the tuner via the I2C repeater.  
 137          Parameters: 
 138          ucSlaveAddr;  The slave address of the tuner device. Please note AVL2108 only support 7 bits slave address
             -.   
 139          ucBuff;  The buffer which hold the send out data.   
 140          uiSize;  How many bytes the caller want to write.   
 141          pAVLChip; A pointer that points to an A2108_Chip object which is used to tell the function which AVL2108  
             -  
 142                  chip it is working on.  
 143          Remarks: 
 144          The tuner register address to which data is being written must be  included in the input buffer ucBuff. 
 145          For many tuners, the register address is specified as the first byte to be transmitted, and thus should 
 146          be placed in the first byte entry of ucBuff.  However, the user must refer to the datasheet for the specif
             -ic
 147          tuner being used to ensure that they place the register address in the correct location within the input b
             -uffer. 
 148           
 149           æ≠”…I2C repeater–¥ ˝æ›µΩtuner£¨“™∑¢ÀÕµƒ ˝◊ÈpucBuff¥Û–°Œ™uiSize£¨*/
 150          A2108_ErrorCode A2108_II2CRepeater_SendData(  AVL_uchar ucSlaveAddr, const AVL_puchar pucBuff, AVL_uint16 
             -uiSize, struct A2108_Chip * pAVLChip )
 151          {
 152   1              AVL_uchar pBuff[I2CM_CMD_LENGTH+3];      //     #define I2CM_CMD_LENGTH   0x14
 153   1                      AVL_uint16 i1, i2;
 154   1              AVL_uint16 cmdSize;
 155   1      
 156   1              if ( uiSize>I2CM_CMD_LENGTH-3 )
 157   1              {
 158   2                      return(A2108_EC_GeneralFail);
 159   2              }
 160   1      
 161   1              cmdSize = ((3+uiSize)%2)+3+uiSize;        /* How many bytes nee send to AVL2108 through i2c interface */
 162   1              ChunkAddr(i2cm_cmd_addr+I2CM_CMD_LENGTH-cmdSize, pBuff);
 163   1      
 164   1              i1 = 3+((3+uiSize)%2);    /* skip one byte if the uisize+3 is odd*/
 165   1      
 166   1              for ( i2=0; i2<uiSize; i2++ )
 167   1              {
C51 COMPILER V9.00   II2CREPEATER                                                          03/18/2016 16:14:09 PAGE 4   

 168   2                      pBuff[i1++] = pucBuff[i2];
 169   2              }
 170   1              pBuff[i1++] = (AVL_uchar)uiSize;
 171   1              pBuff[i1++] = ucSlaveAddr;
 172   1              pBuff[i1++] = OP_I2CM_WRITE;
 173   1      
 174   1              return(A2108_II2CRepeater_SendOP(pBuff, (AVL_uchar)(cmdSize+3), pAVLChip));
 175   1      }
 176          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1424    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    109    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
